{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Introduction Projectile motion is one of the fundamental topics in classical mechanics, describing the motion of an object launched into the air under the influence of gravity. The path followed by such an object is called a parabola, assuming there is no air resistance. The horizontal range of a projectile depends on various factors, including the initial velocity, launch angle, and gravitational acceleration. Understanding projectile motion has practical applications in sports, engineering, and space exploration. This document aims to derive the governing equations, analyze the dependence of range on launch angle, and implement a Python simulation to visualize the results. Governing Equations of Motion The motion of a projectile can be described using the equations of motion in two dimensions: Horizontal motion (constant velocity, no acceleration apart from initial push): $$ x(t) = v_0 \\cos(\\theta) t $$ - Vertical motion (accelerated motion due to gravity): $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ where: ( \\(\\v_0\\$) is the initial velocity , (\\) \\theta $) is the launch angle, $( g $)$ is the acceleration due to gravity (9.81 m/s\u00b2 on Earth), $( x(t) $) and $( y(t) $) represent the projectile's position at time \\( t \\) . Time of Flight To determine how long the projectile stays in the air, we set the vertical position to zero (assuming it starts and ends at the same height): $$ v y(T) = 0 = v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 $$ Factoring out \\( T \\) , we solve for total flight time: $$ T = \\frac{2 v_0 \\sin(\\theta)}{g} $$ This formula shows that the time in the air depends on the initial velocity and the launch angle. Horizontal Range Using the time of flight equation, we compute the range \\( R \\) as follows: $$ R = v_0 \\cos(\\theta) T = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ From this equation, we can observe that: - The range depends on ( \\(\\v_0^2\\$) meaning an increase in initial velocity significantly increases the range. - The term \\$sin(2\\theta\\) ) determines how the launch angle affects the range. The range is maximum when $ \\(( \\theta = 45^\\circ \\$\\) ). 2. Analysis of the Range Effect of Angle: The range is symmetric about 45\u00b0. That means for two angles $ \\(( \\theta \\$\\) ) and $ \\(( 90^\\circ - \\theta \\$\\) ), the range will be the same. Effect of Initial Velocity: Since $ \\(( R \\propto v_0^2 \\$\\) ), doubling the initial velocity results in a fourfold increase in range. Effect of Gravity: A larger $ \\(( g \\$\\) ) reduces the range, which is why projectiles travel farther on the Moon (where $ \\(( g \\$\\) ) is smaller). Maximum Range Derivation: The derivative of \\( R \\) with respect to \\( \\theta \\) shows that the maximum range occurs at $ \\(( 45^\\circ \\$\\) ). 3. Practical Applications Projectile motion is widely used in: - Sports: In games like soccer, basketball, and golf, understanding projectile motion helps optimize shots. - Military and Engineering: In ballistics, projectile trajectories are carefully calculated for accuracy. - Space Exploration: Calculations for planetary landings and spacecraft motion involve projectile motion principles. 4. Implementation (Python Simulation) The following Python script simulates projectile motion and plots the range as a function of the launch angle: import numpy as np import matplotlib.pyplot as plt ![alt text](download.png) def projectile_range(v0, g=9.81): \"\"\" This function computes and plots the projectile range as a function of launch angle. Parameters: v0: float - Initial velocity in m/s g: float - Acceleration due to gravity (default is 9.81 m/s\u00b2) \"\"\" angles = np.linspace(0, 90, num=100) # Generate angles from 0\u00b0 to 90\u00b0 angles_rad = np.radians(angles) # Convert angles to radians # Compute range using the derived equation R = (v0^2 * sin(2\u03b8)) / g ranges = (v0**2 * np.sin(2 * angles_rad)) / g # Plot results plt.figure(figsize=(10,6)) plt.plot(angles, ranges, label=f'Initial Velocity: {v0} m/s', color='b') plt.axvline(x=45, color='r', linestyle='--', label='Maximum Range at 45\u00b0') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Angle') plt.legend() plt.grid() # Save the plot as a PNG image plt.savefig('download.png', dpi=300) # Saves the plot as PNG with 300 dpi plt.show() # Example: v0 = 20 m/s projectile_range(20) *Define projectile_range Function Generates a set of angles from 0\u00b0 to 90\u00b0. Converts angles to radians since trigonometric functions in Python use radians. Computes the projectile range for each angle using the derived equation. Plots the range as a function of launch angle. Plotting the Results A blue curve represents the range for different angles. A dashed red line marks the angle at which the maximum range occurs (45\u00b0). Labels and grid are added for better readability. 5. Limitations and Further Considerations No Air Resistance: The model assumes no drag forces, which can significantly affect real-world projectile motion. Flat Terrain: The calculations assume a flat surface, but in reality, terrains are uneven. Wind Effects: The influence of wind is ignored, though it can greatly impact the trajectory. Launch Height: The current derivation assumes the projectile is launched from and lands at the same height. If the launch height differs, the equations become more complex. Future Improvements: Incorporating air resistance using numerical methods. Simulating projectiles with variable gravitational fields. Exploring multi-stage projectile motion (e.g., rocket launches). Considering spin and Magnus effect for applications in sports and aerodynamics.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1_1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#introduction","text":"Projectile motion is one of the fundamental topics in classical mechanics, describing the motion of an object launched into the air under the influence of gravity. The path followed by such an object is called a parabola, assuming there is no air resistance. The horizontal range of a projectile depends on various factors, including the initial velocity, launch angle, and gravitational acceleration. Understanding projectile motion has practical applications in sports, engineering, and space exploration. This document aims to derive the governing equations, analyze the dependence of range on launch angle, and implement a Python simulation to visualize the results.","title":"Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations-of-motion","text":"The motion of a projectile can be described using the equations of motion in two dimensions: Horizontal motion (constant velocity, no acceleration apart from initial push): $$ x(t) = v_0 \\cos(\\theta) t $$ - Vertical motion (accelerated motion due to gravity): $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ where: ( \\(\\v_0\\$) is the initial velocity , (\\) \\theta $) is the launch angle, $( g $)$ is the acceleration due to gravity (9.81 m/s\u00b2 on Earth), $( x(t) $) and $( y(t) $) represent the projectile's position at time \\( t \\) .","title":"Governing Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"To determine how long the projectile stays in the air, we set the vertical position to zero (assuming it starts and ends at the same height): $$ v y(T) = 0 = v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 $$ Factoring out \\( T \\) , we solve for total flight time: $$ T = \\frac{2 v_0 \\sin(\\theta)}{g} $$ This formula shows that the time in the air depends on the initial velocity and the launch angle.","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-range","text":"Using the time of flight equation, we compute the range \\( R \\) as follows: $$ R = v_0 \\cos(\\theta) T = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ From this equation, we can observe that: - The range depends on ( \\(\\v_0^2\\$) meaning an increase in initial velocity significantly increases the range. - The term \\$sin(2\\theta\\) ) determines how the launch angle affects the range. The range is maximum when $ \\(( \\theta = 45^\\circ \\$\\) ).","title":"Horizontal Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"Effect of Angle: The range is symmetric about 45\u00b0. That means for two angles $ \\(( \\theta \\$\\) ) and $ \\(( 90^\\circ - \\theta \\$\\) ), the range will be the same. Effect of Initial Velocity: Since $ \\(( R \\propto v_0^2 \\$\\) ), doubling the initial velocity results in a fourfold increase in range. Effect of Gravity: A larger $ \\(( g \\$\\) ) reduces the range, which is why projectiles travel farther on the Moon (where $ \\(( g \\$\\) ) is smaller). Maximum Range Derivation: The derivative of \\( R \\) with respect to \\( \\theta \\) shows that the maximum range occurs at $ \\(( 45^\\circ \\$\\) ).","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Projectile motion is widely used in: - Sports: In games like soccer, basketball, and golf, understanding projectile motion helps optimize shots. - Military and Engineering: In ballistics, projectile trajectories are carefully calculated for accuracy. - Space Exploration: Calculations for planetary landings and spacecraft motion involve projectile motion principles.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-python-simulation","text":"The following Python script simulates projectile motion and plots the range as a function of the launch angle: import numpy as np import matplotlib.pyplot as plt ![alt text](download.png) def projectile_range(v0, g=9.81): \"\"\" This function computes and plots the projectile range as a function of launch angle. Parameters: v0: float - Initial velocity in m/s g: float - Acceleration due to gravity (default is 9.81 m/s\u00b2) \"\"\" angles = np.linspace(0, 90, num=100) # Generate angles from 0\u00b0 to 90\u00b0 angles_rad = np.radians(angles) # Convert angles to radians # Compute range using the derived equation R = (v0^2 * sin(2\u03b8)) / g ranges = (v0**2 * np.sin(2 * angles_rad)) / g # Plot results plt.figure(figsize=(10,6)) plt.plot(angles, ranges, label=f'Initial Velocity: {v0} m/s', color='b') plt.axvline(x=45, color='r', linestyle='--', label='Maximum Range at 45\u00b0') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Angle') plt.legend() plt.grid() # Save the plot as a PNG image plt.savefig('download.png', dpi=300) # Saves the plot as PNG with 300 dpi plt.show() # Example: v0 = 20 m/s projectile_range(20) *Define projectile_range Function Generates a set of angles from 0\u00b0 to 90\u00b0. Converts angles to radians since trigonometric functions in Python use radians. Computes the projectile range for each angle using the derived equation. Plots the range as a function of launch angle. Plotting the Results A blue curve represents the range for different angles. A dashed red line marks the angle at which the maximum range occurs (45\u00b0). Labels and grid are added for better readability.","title":"4. Implementation (Python Simulation)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-and-further-considerations","text":"No Air Resistance: The model assumes no drag forces, which can significantly affect real-world projectile motion. Flat Terrain: The calculations assume a flat surface, but in reality, terrains are uneven. Wind Effects: The influence of wind is ignored, though it can greatly impact the trajectory. Launch Height: The current derivation assumes the projectile is launched from and lands at the same height. If the launch height differs, the equations become more complex.","title":"5. Limitations and Further Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#future-improvements","text":"Incorporating air resistance using numerical methods. Simulating projectiles with variable gravitational fields. Exploring multi-stage projectile motion (e.g., rocket launches). Considering spin and Magnus effect for applications in sports and aerodynamics.","title":"Future Improvements:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}